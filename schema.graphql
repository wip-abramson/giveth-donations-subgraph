type Donation @entity {
    id: ID!,
    from: Giver!,
    to: DonationRecipient!,
    token: Token!
#    weiValue: BigInt!
    value: BigDecimal!,
    timeSent: BigInt!
}

type Giver @entity {
    id: ID!,
    givethId: BigInt
    donationCount: Int!
    donations: [Donation]! @derivedFrom(field: "from")
}

type Token @entity {
  id: ID!
  tokenAddress: Bytes!,
  tokenName: String!
  totalDonated: BigDecimal!
  donationCount: Int!
}

type DonationRecipient @entity {
  id: ID!
  donations: [Donation]! @derivedFrom(field: "to")
  donationCount: Int!
}

type TokenValue @entity {
  id: ID!
  token: Token!
  amount: BigDecimal!
}


#type Donate @entity {
#  id: ID!
#  giverId: BigInt! # uint64
#  receiverId: BigInt! # uint64
#  token: Bytes! # address
#  amount: BigInt! # uint256
#}

#type DonateAndCreateGiver @entity {
#  id: ID!
#  giver: Bytes! # address
#  receiverId: BigInt! # uint64
#  token: Bytes! # address
#  amount: BigInt! # uint256
#}
#
#type EscapeFundsCalled @entity {
#  id: ID!
#  token: Bytes! # address
#  amount: BigInt! # uint256
#}

#type PaymentAuthorized @entity {
#  id: ID!
#  idPayment: BigInt! # uint256
#  recipient: Bytes! # address
#  amount: BigInt! # uint256
#  token: Bytes! # address
#  reference: Bytes! # bytes32
#}

#
#type EscapeHatchBlackistedToken @entity {
#  id: ID!
#  token: Bytes! # address
#}

#type EscapeHatchCalled @entity {
#  id: ID!
#  token: Bytes! # address
#  amount: BigInt! # uint256
#}

