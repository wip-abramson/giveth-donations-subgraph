// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Donation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Donation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Donation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Donation", id.toString(), this);
  }

  static load(id: string): Donation | null {
    return store.get("Donation", id) as Donation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get value(): BigDecimal {
    let value = this.get("value");
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get timeSent(): BigInt {
    let value = this.get("timeSent");
    return value.toBigInt();
  }

  set timeSent(value: BigInt) {
    this.set("timeSent", Value.fromBigInt(value));
  }
}

export class Giver extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Giver entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Giver entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Giver", id.toString(), this);
  }

  static load(id: string): Giver | null {
    return store.get("Giver", id) as Giver | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get givethId(): BigInt | null {
    let value = this.get("givethId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set givethId(value: BigInt | null) {
    if (value === null) {
      this.unset("givethId");
    } else {
      this.set("givethId", Value.fromBigInt(value as BigInt));
    }
  }

  get donationCount(): i32 {
    let value = this.get("donationCount");
    return value.toI32();
  }

  set donationCount(value: i32) {
    this.set("donationCount", Value.fromI32(value));
  }

  get donations(): Array<string | null> {
    let value = this.get("donations");
    return value.toStringArray();
  }

  set donations(value: Array<string | null>) {
    this.set("donations", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get tokenName(): string {
    let value = this.get("tokenName");
    return value.toString();
  }

  set tokenName(value: string) {
    this.set("tokenName", Value.fromString(value));
  }

  get totalDonated(): BigDecimal {
    let value = this.get("totalDonated");
    return value.toBigDecimal();
  }

  set totalDonated(value: BigDecimal) {
    this.set("totalDonated", Value.fromBigDecimal(value));
  }

  get donationCount(): i32 {
    let value = this.get("donationCount");
    return value.toI32();
  }

  set donationCount(value: i32) {
    this.set("donationCount", Value.fromI32(value));
  }
}

export class DonationRecipient extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DonationRecipient entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DonationRecipient entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DonationRecipient", id.toString(), this);
  }

  static load(id: string): DonationRecipient | null {
    return store.get("DonationRecipient", id) as DonationRecipient | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get donations(): Array<string | null> {
    let value = this.get("donations");
    return value.toStringArray();
  }

  set donations(value: Array<string | null>) {
    this.set("donations", Value.fromStringArray(value));
  }

  get donationCount(): i32 {
    let value = this.get("donationCount");
    return value.toI32();
  }

  set donationCount(value: i32) {
    this.set("donationCount", Value.fromI32(value));
  }
}

export class TokenValue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenValue entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenValue entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenValue", id.toString(), this);
  }

  static load(id: string): TokenValue | null {
    return store.get("TokenValue", id) as TokenValue | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}
